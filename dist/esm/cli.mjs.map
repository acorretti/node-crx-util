{"version":3,"file":"cli.mjs","sourceRoot":"","sources":["../../src/cli.mts"],"names":[],"mappings":";AAEA,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,MAAM,CAAA;AACrC,OAAO,EAAE,aAAa,EAAE,YAAY,EAAE,MAAM,WAAW,CAAA;AACvD,OAAO,EAAE,OAAO,EAAE,MAAM,aAAa,CAAA;AAErC,MAAM,IAAI,GAAG;;;;;;;;;;;;0CAY6B,CAAA;AAE1C,MAAM,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;AAEnC,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC;IACnD,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;AACnB,CAAC;KAAM,CAAC;IACN,MAAM,CAAC,GAA2B,EAAE,CAAA;IACpC,IAAI,CAAC,OAAO,CAAC,CAAC,EAAE,EAAE,EAAE;QAClB,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;QAC5B,CAAC,CAAC,CAAE,CAAC,GAAG,CAAE,CAAA;IACZ,CAAC,CAAC,CAAA;IACF,MAAM,OAAO,GAAG;QACd,GAAG,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC;QAC1B,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC;QACxB,MAAM,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,UAAU,CAAC;QAChC,MAAM,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,UAAU,CAAC,IAAI,OAAO,CAAC,GAAG,EAAE;QACjD,GAAG,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC;KAC/B,CAAA;IACD,wBAAwB;IACxB,IAAI,OAAO,CAAC,GAAG,EAAE,CAAC;QAChB,aAAa,CAAC,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC,MAAM,CAAC,CAAA;IAC5C,CAAC;SAAM,IAAI,OAAO,CAAC,EAAE,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;QACxC,YAAY,CAAC,OAAO,CAAC,EAAE,EAAE,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,MAAM,CAAC,CAAA;IAC1D,CAAC;SAAM,IAAI,OAAO,CAAC,GAAG,EAAE,CAAC;QACvB,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAA;QACzB,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAA;QAC9B,IAAI,CAAC;YACH,MAAM,MAAM,GAAG,OAAO,CAAC,OAAO,CAAC,MAAM,EAAE,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAA;YAC/D,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,MAAM,CAAC,CAAA;YAC5B,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAA;QACxB,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACb,OAAO,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAA;YACjC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;QACpB,CAAC;IACH,CAAC;SAAM,CAAC;QACN,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;IACnB,CAAC;AACH,CAAC","sourcesContent":["#!/usr/bin/env node\n\nimport { resolve, parse } from 'path'\nimport { downloadByURL, downloadById } from './main.js'\nimport { extract } from './parser.js'\n\nconst help = `Usage: crx-util -u=url [-o=destination]\nUsage: crx-util -i=extensionId -s=source [-o=destination]\nUsage: crx-util -e=crxPath [-o=destination]\n\nDownload (and extract) Chrome/Edge extension.\n\nArguments:\n  -u, --url      Chrome/Edge extension url\n  -i, --id       Extension id\n  -s, --source   Extension source, \"chrome\" or \"edge\"\n  -e, --extract  Extract a local CRX file\n  -o, --output   Destination, if it ends with \".crx\", it will be saved as a CRX file, otherwise it will be extracted to \"\\${destination}/\\${extensionId}\". Default by \"process.cwd()\".\n  -h, --help     Display help for command`\n\nconst args = process.argv.splice(2)\n\nif (args.includes('-h') || args.includes('--help')) {\n  console.log(help)\n} else {\n  const o: Record<string, string> = {}\n  args.forEach((kv) => {\n    const [k, v] = kv.split('=')\n    o[k!] = v!\n  })\n  const options = {\n    url: o['-u'] || o['--url'],\n    id: o['-i'] || o['--id'],\n    source: o['-s'] || o['--source'],\n    output: o['-o'] || o['--output'] || process.cwd(),\n    crx: o['-e'] || o['--extract'],\n  }\n  // console.log(options);\n  if (options.url) {\n    downloadByURL(options.url, options.output)\n  } else if (options.id && options.source) {\n    downloadById(options.id, options.source, options.output)\n  } else if (options.crx) {\n    console.log('[CRX Util]')\n    console.log('  extracting...')\n    try {\n      const output = resolve(options.output, parse(options.crx).name)\n      extract(options.crx, output)\n      console.log('  done!')\n    } catch (err) {\n      console.error('  extract failed')\n      console.error(err)\n    }\n  } else {\n    console.log(help)\n  }\n}\n"]}