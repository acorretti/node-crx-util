{"version":3,"file":"parser.js","sourceRoot":"","sources":["../../src/parser.ts"],"names":[],"mappings":";;;;;;AAAA,+BAA8B;AAC9B,2BAAiC;AACjC,sDAA4B;AAE5B,SAAS,SAAS,CAAC,eAAgC;IACjD,OAAO,OAAO,eAAe,KAAK,QAAQ;QACxC,CAAC,CAAC,IAAA,iBAAY,EAAC,eAAe,CAAC;QAC/B,CAAC,CAAC,eAAe,CAAA;AACrB,CAAC;AAED,SAAgB,KAAK,CAAC,eAAgC;IACpD,MAAM,MAAM,GAAG,SAAS,CAAC,eAAe,CAAC,CAAA;IACzC,MAAM,KAAK,GAAG,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,CAAA;IACpC,OAAO,KAAK,KAAK,UAAU,CAAA,CAAC,OAAO;AACrC,CAAC;AAJD,sBAIC;AAED,SAAgB,aAAa,CAAC,eAAgC;IAC5D,MAAM,MAAM,GAAG,SAAS,CAAC,eAAe,CAAC,CAAA;IACzC,OAAO,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,CAAA;AAC/B,CAAC;AAHD,sCAGC;AAED,SAAgB,cAAc,CAAC,eAAgC;IAC7D,MAAM,MAAM,GAAG,SAAS,CAAC,eAAe,CAAC,CAAA;IAEzC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC;QACnB,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAA;IACrC,CAAC;IAED,MAAM,OAAO,GAAG,aAAa,CAAC,MAAM,CAAC,CAAA;IACrC,OAAO,CAAC,GAAG,CAAC,kBAAkB,OAAO,EAAE,CAAC,CAAA;IAExC,IAAI,OAAO,IAAI,CAAC,EAAE,CAAC;QACjB,MAAM,eAAe,GAAG,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,CAAA;QAC9C,MAAM,eAAe,GAAG,MAAM,CAAC,YAAY,CAAC,EAAE,CAAC,CAAA;QAC/C,OAAO,MAAM,CAAC,KAAK,CAAC,EAAE,GAAG,eAAe,GAAG,eAAe,CAAC,CAAA;IAC7D,CAAC;SAAM,CAAC;QACN,MAAM,YAAY,GAAG,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,CAAA;QAC3C,OAAO,MAAM,CAAC,KAAK,CAAC,EAAE,GAAG,YAAY,CAAC,CAAA;IACxC,CAAC;AACH,CAAC;AAlBD,wCAkBC;AAED,SAAgB,OAAO,CACrB,eAAgC,EAChC,MAAM,GAAG,OAAO,CAAC,GAAG,EAAE;IAEtB,MAAM,QAAQ,GAAG,cAAc,CAAC,eAAe,CAAC,CAAA;IAChD,MAAM,GAAG,GAAG,IAAI,iBAAM,CAAC,QAAQ,CAAC,CAAA;IAChC,GAAG,CAAC,YAAY,CAAC,IAAA,cAAO,EAAC,MAAM,CAAC,CAAC,CAAA;AACnC,CAAC;AAPD,0BAOC","sourcesContent":["import { resolve } from 'path'\nimport { readFileSync } from 'fs'\nimport AdmZip from 'adm-zip'\n\nfunction getBuffer(crxPathOrBuffer: string | Buffer) {\n  return typeof crxPathOrBuffer === 'string'\n    ? readFileSync(crxPathOrBuffer)\n    : crxPathOrBuffer\n}\n\nexport function isCrx(crxPathOrBuffer: string | Buffer) {\n  const buffer = getBuffer(crxPathOrBuffer)\n  const magic = buffer.readUInt32BE(0)\n  return magic === 0x43723234 // Cr24\n}\n\nexport function getCrxVersion(crxPathOrBuffer: string | Buffer) {\n  const buffer = getBuffer(crxPathOrBuffer)\n  return buffer.readUInt32LE(4)\n}\n\nexport function getZipContents(crxPathOrBuffer: string | Buffer) {\n  const buffer = getBuffer(crxPathOrBuffer)\n\n  if (!isCrx(buffer)) {\n    throw new Error('Not a CRX format')\n  }\n\n  const version = getCrxVersion(buffer)\n  console.log(`  CRX version: ${version}`)\n\n  if (version <= 2) {\n    const publicKeyLength = buffer.readUInt32LE(8)\n    const signatureLength = buffer.readUInt32LE(12)\n    return buffer.slice(16 + publicKeyLength + signatureLength)\n  } else {\n    const headerLength = buffer.readUInt32LE(8)\n    return buffer.slice(12 + headerLength)\n  }\n}\n\nexport function extract(\n  crxPathOrBuffer: string | Buffer,\n  output = process.cwd()\n) {\n  const contents = getZipContents(crxPathOrBuffer)\n  const zip = new AdmZip(contents)\n  zip.extractAllTo(resolve(output))\n}\n"]}