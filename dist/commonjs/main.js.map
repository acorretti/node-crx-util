{"version":3,"file":"main.js","sourceRoot":"","sources":["../../src/main.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,+BAA8B;AAC9B,2BAAkC;AAClC,4DAA6C;AAC7C,2CAAqC;AAErC;;;;;;GAMG;AACH,SAAgB,aAAa,CAAC,GAAW,EAAE,MAAM,GAAG,OAAO,CAAC,GAAG,EAAE;IAC/D,MAAM,EAAE,WAAW,EAAE,MAAM,EAAE,GAAG,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAA;IACxD,OAAO,YAAY,CAAC,WAAW,EAAE,MAAM,EAAE,MAAM,CAAC,CAAA;AAClD,CAAC;AAHD,sCAGC;AAED,SAAgB,YAAY,CAC1B,WAAmB,EACnB,MAAc,EACd,MAAM,GAAG,OAAO,CAAC,GAAG,EAAE;IAStB,IAAI,MAAM,KAAK,QAAQ,IAAI,MAAM,KAAK,MAAM,EAAE,CAAC;QAC7C,MAAM,mCAAmC,CAAA;IAC3C,CAAC;IACD,MAAM,WAAW,GAAG,UAAU,CAAC,cAAc,CAAC,WAAW,EAAE,MAAM,CAAC,CAAA;IAClE,MAAM,SAAS,GAAG,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;IACxC,MAAM,GAAG,SAAS,CAAC,CAAC,CAAC,IAAA,cAAO,EAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAA,cAAO,EAAC,MAAM,EAAE,WAAW,CAAC,CAAA;IACnE,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAA;IACzB,OAAO,CAAC,GAAG,CAAC,QAAQ,GAAG,WAAW,CAAC,CAAA;IACnC,OAAO,CAAC,GAAG,CAAC,UAAU,GAAG,WAAW,CAAC,CAAA;IACrC,OAAO,CAAC,GAAG,CAAC,QAAQ,GAAG,MAAM,CAAC,CAAA;IAC9B,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAA;IAC/B,OAAO,UAAU;SACd,YAAY,CAAC,WAAW,EAAE,MAAM,CAAC;SACjC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE;QACf,IAAI,SAAS,EAAE,CAAC;YACd,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAA;YAC1B,IAAA,kBAAa,EAAC,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAA;YAC1C,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAA;QACxB,CAAC;aAAM,CAAC;YACN,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAA;YAC9B,IAAI,CAAC;gBACH,IAAA,mBAAO,EAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,MAAM,CAAC,CAAA;gBACpC,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAA;YACxB,CAAC;YAAC,OAAO,GAAG,EAAE,CAAC;gBACb,OAAO,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAA;gBACjC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;gBAClB,OAAO,OAAO,CAAC,MAAM,CAAC,GAAG,IAAI,gBAAgB,CAAC,CAAA;YAChD,CAAC;QACH,CAAC;QACD,OAAO,EAAE,MAAM,EAAE,IAAI,EAAE,WAAW,EAAE,MAAM,EAAE,WAAW,EAAE,MAAM,EAAE,CAAA;IACnE,CAAC,CAAC;SACD,KAAK,CAAC,CAAC,KAAY,EAAE,EAAE;QACtB,OAAO,CAAC,KAAK,CAAC,IAAI,GAAG,KAAK,CAAC,CAAA;QAC3B,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,WAAW,EAAE,MAAM,EAAE,WAAW,EAAE,MAAM,EAAE,CAAA;IAC3E,CAAC,CAAC,CAAA;AACN,CAAC;AA/CD,oCA+CC","sourcesContent":["import { resolve } from 'path'\nimport { writeFileSync } from 'fs'\nimport * as downloader from './downloader.js'\nimport { extract } from './parser.js'\n\n/**\n * Download a CRX file by url\n * @param {String} url Chrome/Edge extension url\n * @param {String} output If `output` ends with \".crx\", it will be saved as a CRX file, otherwise it will be extracted to `${output}/${extensionId}`. Default by `process.cwd()`.\n * @return\n * @public\n */\nexport function downloadByURL(url: string, output = process.cwd()) {\n  const { extensionId, source } = downloader.parseURL(url)\n  return downloadById(extensionId, source, output)\n}\n\nexport function downloadById(\n  extensionId: string,\n  source: string,\n  output = process.cwd()\n): Promise<{\n  result: boolean\n  extensionId: string\n  source: string\n  downloadURL: string\n  output: string\n  error?: Error\n}> {\n  if (source !== 'chrome' && source !== 'edge') {\n    throw 'source must be \"chrome\" or \"edge\"'\n  }\n  const downloadURL = downloader.getDownloadURL(extensionId, source)\n  const saveAsCRX = /\\.crx$/i.test(output)\n  output = saveAsCRX ? resolve(output) : resolve(output, extensionId)\n  console.log('[CRX Util]')\n  console.log('  id: ' + extensionId)\n  console.log('  from: ' + downloadURL)\n  console.log('  to: ' + output)\n  console.log('  downloading...')\n  return downloader\n    .downloadById(extensionId, source)\n    .then((buffer) => {\n      if (saveAsCRX) {\n        console.log('  saving...')\n        writeFileSync(output, Buffer.from(buffer))\n        console.log('  done!')\n      } else {\n        console.log('  extracting...')\n        try {\n          extract(Buffer.from(buffer), output)\n          console.log('  done!')\n        } catch (err) {\n          console.error('  extract failed')\n          console.error(err)\n          return Promise.reject(err || 'extract failed')\n        }\n      }\n      return { result: true, extensionId, source, downloadURL, output }\n    })\n    .catch((error: Error) => {\n      console.error('  ' + error)\n      return { result: false, error, extensionId, source, downloadURL, output }\n    })\n}\n"]}