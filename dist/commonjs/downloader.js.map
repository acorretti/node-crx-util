{"version":3,"file":"downloader.js","sourceRoot":"","sources":["../../src/downloader.ts"],"names":[],"mappings":";;;AAAa,QAAA,WAAW,GAAG;IACzB,MAAM,EACJ,4JAA4J;IAC9J,IAAI,EAAE,iIAAiI;CACxI,CAAA;AAED,SAAgB,cAAc,CAC5B,WAAmB,EACnB,MAAgC;IAEhC,OAAO,mBAAW,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,gBAAgB,EAAE,WAAW,CAAC,CAAA;AACnE,CAAC;AALD,wCAKC;AAED,SAAgB,cAAc,CAAC,GAAW;IACxC,OAAO,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,EAAG,CAAA;AAChD,CAAC;AAFD,wCAEC;AAED,SAAgB,QAAQ,CAAC,GAAW;IAClC,IAAI,WAAW,GAAG,EAAE,CAAA;IACpB,IAAI,MAAM,GAA6B,QAAQ,CAAA;IAC/C,IAAI,GAAG,CAAC,UAAU,CAAC,4BAA4B,CAAC,EAAE,CAAC;QACjD,WAAW,GAAG,cAAc,CAAC,GAAG,CAAC,CAAA;QACjC,MAAM,GAAG,QAAQ,CAAA;IACnB,CAAC;SAAM,IAAI,GAAG,CAAC,UAAU,CAAC,sCAAsC,CAAC,EAAE,CAAC;QAClE,WAAW,GAAG,cAAc,CAAC,GAAG,CAAC,CAAA;QACjC,MAAM,GAAG,MAAM,CAAA;IACjB,CAAC;IACD,OAAO,EAAE,WAAW,EAAE,MAAM,EAAE,CAAA;AAChC,CAAC;AAXD,4BAWC;AAED,SAAgB,aAAa,CAAC,GAAW;IACvC,MAAM,EAAE,WAAW,EAAE,MAAM,EAAE,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAA;IAC7C,OAAO,YAAY,CAAC,WAAW,EAAE,MAAM,CAAC,CAAA;AAC1C,CAAC;AAHD,sCAGC;AAEM,KAAK,UAAU,YAAY,CAChC,WAAmB,EACnB,MAAgC;IAEhC,MAAM,GAAG,GAAG,cAAc,CAAC,WAAW,EAAE,MAAM,CAAC,CAAA;IAC/C,OAAO,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,EAAE;QAClC,IAAI,CAAC,QAAQ,CAAC,EAAE,IAAI,QAAQ,CAAC,MAAM,KAAK,GAAG,EAAE,CAAC;YAC5C,MAAM,IAAI,KAAK,CACb,4CAA4C,QAAQ,CAAC,MAAM,GAAG,CAC/D,CAAA;QACH,CAAC;QACD,OAAO,QAAQ,CAAC,WAAW,EAAE,CAAA;IAC/B,CAAC,CAAC,CAAA;AACJ,CAAC;AAbD,oCAaC","sourcesContent":["export const URL_PATTERN = {\n  chrome:\n    'https://clients2.google.com/service/update2/crx?response=redirect&prodversion=49.0&acceptformat=crx3&x=id%3D[EXTENSION_ID]%26installsource%3Dondemand%26uc',\n  edge: 'https://edge.microsoft.com/extensionwebstorebase/v1/crx?response=redirect&x=id%3D[EXTENSION_ID]%26installsource%3Dondemand%26uc',\n}\n\nexport function getDownloadURL(\n  extensionId: string,\n  source: keyof typeof URL_PATTERN\n) {\n  return URL_PATTERN[source].replace('[EXTENSION_ID]', extensionId)\n}\n\nexport function getExtensionId(url: string) {\n  return new URL(url).pathname.split('/').pop()!\n}\n\nexport function parseURL(url: string) {\n  let extensionId = ''\n  let source: keyof typeof URL_PATTERN = 'chrome'\n  if (url.startsWith('https://chrome.google.com/')) {\n    extensionId = getExtensionId(url)\n    source = 'chrome'\n  } else if (url.startsWith('https://microsoftedge.microsoft.com/')) {\n    extensionId = getExtensionId(url)\n    source = 'edge'\n  }\n  return { extensionId, source }\n}\n\nexport function downloadByURL(url: string) {\n  const { extensionId, source } = parseURL(url)\n  return downloadById(extensionId, source)\n}\n\nexport async function downloadById(\n  extensionId: string,\n  source: keyof typeof URL_PATTERN\n): Promise<ArrayBuffer> {\n  const url = getDownloadURL(extensionId, source)\n  return fetch(url).then((response) => {\n    if (!response.ok || response.status !== 200) {\n      throw new Error(\n        `unable to download the CRX file [status: ${response.status}]`\n      )\n    }\n    return response.arrayBuffer()\n  })\n}\n"]}